#!/bin/sh
###############################################################################
# BleemSync Function Library - BleemSync
# ModMyClassic.com / https://discordapp.com/invite/8gygsrw
###############################################################################

### LOCAL FUNCTIONS ###########################################################
launch_RetroArch(){
	echo "[BLEEMSYNC](INFO) launching RetroArch"
	if [ -f "$mountpoint/bleemsync/opt/retroarch/retroarch" ]; then
		killall -s KILL showLogo sonyapp ui_menu auto_dimmer pcsx sdl_display
		[ -f "$runtime_log_path/retroarch.log" ] && rm -f "$runtime_log_path/retroarch.log"
		if [ ! -f "$mountpoint/bleemsync/opt/retroarch/system/scph102b.bin" ]; then
		  mkdir -p "$mountpoint/bleemsync/opt/retroarch/system"
			cp -f "/gaadata/system/bios/romw.bin" "$mountpoint/bleemsync/opt/retroarch/system/scph102b.bin"
			echo "[BLEEMSYNC](INFO) copied romw.bin to scph102b.bin for RA PCSX"
		fi
		mkdir -p "/tmp/ra_cache"
		chmod +x "$mountpoint/bleemsync/opt/retroarch/retroarch"
		export HOME="$mountpoint/bleemsync/opt/retroarch"
		$mountpoint/bleemsync/opt/retroarch/retroarch -v &> "$runtime_log_path/retroarch.log"
		rm -rf "/tmp/ra_cache"
		cd /
		sync
		launch_BootMenu
	else
	  #you done goofed.
	  /media/bleemsync/bin/sdl_display "/media/bleemsync/etc/bleemsync/IMG/woah.png"
	  sleep 1
	  echo "[BLEEMSYNC](FAIL) tried to launch RetroArch and it's not installed! Opening Stock UI..."
	  launch_StockUI
	fi
}

launch_BootMenu(){
	echo "[BLEEMSYNC](INFO) launching BootMenu"
	$mountpoint/bleemsync/bin/boot_menu 
	[ -f "/tmp/launchfilecommand" ] && command=$(cat "/tmp/launchfilecommand")
	if [ "$command" = "/media/lolhack/retroarch.sh" ]; then
		echo "[BLEEMSYNC](INFO) RA selected from boot menu. Launching RetroArch"
		launch_RetroArch
	else
		echo "[BLEEMSYNC](INFO) BS selected from boot menu (or failsafed). Launching stock UI"
		launch_StockUI
	fi
}

launch_StockUI(){
	echo "[BLEEMSYNC](INFO) launching stock UI"
	cd "/data/AppData/sony/pcsx"
	export PCSX_ESC_KEY=2
	/usr/sony/bin/ui_menu --power-off-enable &> "$runtime_log_path/ui_menu.log"
}
###############################################################################

execute_bleemsync_func(){
	echo "[BLEEMSYNC](Executing) execute_bleemsync_func()"
	echo 1 > /sys/class/leds/red/brightness
	
	if [ -f "$mountpoint/System/BleemSync/BleemSync" ]
	then
		cd "$mountpoint/System/BleemSync"
		chmod +x "BleemSync"
		./BleemSync
		cd -
	fi

	# Extract system files to avoid crashing
	mkdir -p "$mountpoint/System/Bios"
	mkdir -p "$mountpoint/System/Preferences"
	mkdir -p "$mountpoint/System/Preferences/System"
	mkdir -p "$mountpoint/System/Preferences/User"
	mkdir -p "$mountpoint/System/Preferences/AutoDimmer"
	mkdir -p "$mountpoint/System/Databases"
	mkdir -p "$mountpoint/System/Region"
	mkdir -p "$mountpoint/System/UI"

	# Copy the BIOS files to USB
	[ ! -f "$mountpoint/System/Bios/romw.bin" ] && cp -fr "/gaadata/system/bios/"* "$mountpoint/System/Bios"
	# Copy the regional.pre to USB
	# This contains settings for the UI region
	[ ! -f "$mountpoint/System/Preferences/System/regional.pre" ] && cp -f "/gaadata/preferences/"* "$mountpoint/System/Preferences/System"
	# Copy out the user.pre to USB
	# This contains things like language setting
	[ ! -f "$mountpoint/System/Preferences/User/user.pre" ] && cp -f "/data/AppData/sony/ui/"* "$mountpoint/System/Preferences/User"
	# Copy out the auto dimming config to USB
	[ ! -f "$mountpoint/System/Preferences/AutoDimmer/config.cnf" ] && cp -f "/data/AppData/sony/auto_dimmer/"* "$mountpoint/System/Preferences/AutoDimmer"
	# Copy out the region info
	[ ! -f "$mountpoint/System/Region/REGION" ] && cp -f "/gaadata/geninfo/"* "$mountpoint/System/Region"
	# Copy ui error log
	[ ! -f "$mountpoint/System/UI/error.log" ] && cp -f "/data/sony/ui/"* "$mountpoint/System/UI"
	sync

	# Unmount partitons and create tmpfs - Shut system down on failure
	MOUNT_FAIL=0
	umount /data || MOUNT_FAIL=1 
	umount /gaadata || MOUNT_FAIL=1 
	# Create gaadata and data folders in tmp then mount over original folders
	mkdir -p "/tmp/gaadatatmp" "/tmp/datatmp"
	mount -o bind "/tmp/gaadatatmp" "/gaadata" || MOUNT_FAIL=1 
	mount -o bind "/tmp/datatmp" "/data" || MOUNT_FAIL=1 
	mount -o bind "$bleemsync_path/etc/bleemsync/SUP/scripts/20-joystick.rules" "/etc/udev/rules.d/20-joystick.rules" || MOUNT_FAIL=1 
	if [ "$MOUNT_FAIL" = "1" ]; then
		#display error message
		echo 0 > /sys/class/leds/green/brightness
		echo 1 > /sys/class/leds/red/brightness
		reboot
		exit 1
	fi

	# Create gaadata on tmpfs
	mkdir -p "/tmp/gaadatatmp/system/"
	ln -s "$mountpoint/System/Databases" "/tmp/gaadatatmp/databases"
	ln -s "$mountpoint/System/Region" "/tmp/gaadatatmp/geninfo"
	ln -s "$mountpoint/System/Bios" "/tmp/gaadatatmp/system/bios"
	ln -s "$mountpoint/System/Preferences/System" "/tmp/gaadatatmp/preferences"
	ls "$mountpoint/Games" | grep '^[0-9]\+$' | xargs -I % sh -c "ln -s $mountpoint/Games/%/GameData /tmp/gaadatatmp/% && mkdir -p $mountpoint/Games/%/.pcsx && cp $mountpoint/Games/%/GameData/pcsx.cfg $mountpoint/Games/%/.pcsx"

	# Create data on tmpfs
	mkdir -p "/tmp/datatmp/sony/sgmo" "/tmp/datatmp/AppData/sony"
	ln -s "/tmp/diag" "/tmp/datatmp/sony/sgmo/diag"
	ln -s "/dev/shm/power" "/tmp/datatmp/power"
	ln -s "$mountpoint/System/UI" "/tmp/datatmp/sony/ui"
	ln -s "$mountpoint/System/Preferences/User" "/tmp/datatmp/AppData/sony/ui"
	ln -s "$mountpoint/System/Preferences/AutoDimmer" "/tmp/datatmp/AppData/sony/auto_dimmer"
	cp -fr "/usr/sony/share/recovery/AppData/sony/pcsx" "/tmp/datatmp/AppData/sony/pcsx"
	ls "$mountpoint/Games" | grep '^[0-9]\+$' | xargs -I % sh -c "rm -rf /tmp/datatmp/AppData/sony/pcsx/% && ln -s $mountpoint/Games/% /tmp/datatmp/AppData/sony/pcsx/%"
	ln -s "$mountpoint/System/Bios" "/tmp/datatmp/AppData/sony/pcsx/bios"
	ln -s "/usr/sony/bin/plugins" "/tmp/datatmp/AppData/sony/pcsx/plugins"

	# Fix for last selected game issue. If not in place user may experience UI issue
	sed -i "s/iUiUserSettingLastSelectGameCursorPos.*/iUiUserSettingLastSelectGameCursorPos=0/" "/tmp/datatmp/AppData/sony/ui/user.pre"

	# Reload and apply udev rules that were overmounted above
	# Allows both controllers to be detected through a USB hub
	udevadm control --reload-rules
	udevadm trigger

	# Default pcsx.cfg
	cd "$mountpoint/Games"
	for D in *; do
		if [ -d "$D" ]; then
			if [ ! -f "$D/GameData/pcsx.cfg" ]; then
				cp -f "../System/Defaults/pcsx.cfg" "$D/GameData/pcsx.cfg"
			fi
		fi
	done
	cd -

	#Patch out health check if toggled.
	if [ "$boot_disable_health" = "1" ]; then
		echo "[BLEEMSYNC](INFO) attempting to patch out H+S statement"
		PATCH_FAIL=0
		PATCH_DIR="/tmp/health_patch"
		PATCH_BIN="$PATCH_DIR/patch.bin"
		PATCH_TARGET="/usr/sony/bin/ui_menu"
		PATCH_WORKING="$PATCH_DIR/ui_menu"

		# Perform patching
		mkdir -p "$PATCH_DIR"
		cp -f "$PATCH_TARGET" "$PATCH_WORKING"
		echo -n -e '\xb8\x0c\x00\x06\x03\x58\xbe' > "$PATCH_BIN"
		dd bs=1 if="$PATCH_BIN" skip=0 of="$PATCH_WORKING" seek=28084 count=3 conv=notrunc
		dd bs=1 if="$PATCH_BIN" skip=3 of="$PATCH_WORKING" seek=28120 count=2 conv=notrunc
		dd bs=1 if="$PATCH_BIN" skip=5 of="$PATCH_WORKING" seek=28712 count=2 conv=notrunc
		rm -f "$PATCH_BIN"
		mount -o bind "$PATCH_WORKING" "$PATCH_TARGET" || PATCH_FAIL=1
		if [ "$PATCH_FAIL" = "0" ]; then
			echo "[BLEEMSYNC](INFO) patched out H+S statement"
		else
			echo "[BLEEMSYNC](FAIL) failed to patch out H+S statement, continuing anyway..."
		fi
	fi
	
	echo 0 > /sys/class/leds/red/brightness
	echo "[BLEEMSYNC](INFO) completed bleemsync boot"
	
	killall -s KILL sdl_display

	booted=0

	[ "$boot_target_stock_UI" = "1" ] && [ "$booted" = "0" ] && booted=1 && launch_StockUI
	[ "$boot_target_stock_BM" = "1" ] && [ "$booted" = "0" ] && booted=1 && launch_BootMenu
	[ "$boot_target_stock_RA" = "1" ] && [ "$booted" = "0" ] && booted=1 && launch_RetroArch
	
	#Cleanup and shutdown (If active telnet session don't shutdown console.)
	if [ "$(who | wc -l)" = "1" ]; then
		while true; do
			sleep 999
		done		
	else
		[ -d "/tmp/ra_cache" ] && rm -rf "/tmp/ra_cache"
		sync
		sync
		echo "[BLEEMSYNC](Executed) execute_bleemsync_func()"
		reboot
	fi
	exit 0
}
