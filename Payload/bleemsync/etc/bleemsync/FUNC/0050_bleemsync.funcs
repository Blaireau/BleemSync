#!/bin/sh
###############################################################################
# BleemSync Function Library - BleemSync
# ModMyClassic.com / https://discordapp.com/invite/8gygsrw
###############################################################################

### LOCAL FUNCTIONS ###########################################################
launch_RetroArch(){
  echo "[BLEEMSYNC](INFO) launching RetroArch"
  if [ -f "$mountpoint/bleemsync/opt/retroarch/retroarch" ]; then
    killall -s KILL showLogo sonyapp ui_menu auto_dimmer pcsx sdl_display
    [ -f "$runtime_log_path/retroarch.log" ] && rm -f "$runtime_log_path/retroarch.log"
    if [ ! -f "$mountpoint/bleemsync/opt/retroarch/system/scph102b.bin" ]; then
      mkdir -p "$mountpoint/bleemsync/opt/retroarch/system"
      cp -f "/gaadata/system/bios/romw.bin" "$mountpoint/bleemsync/opt/retroarch/system/scph102b.bin"
      echo "[BLEEMSYNC](INFO) copied romw.bin to scph102b.bin for RA PCSX"
    fi
    mkdir -p "/tmp/ra_cache"
    chmod +x "$mountpoint/bleemsync/opt/retroarch/retroarch"
    export HOME="$mountpoint/bleemsync/opt/retroarch"
    $mountpoint/bleemsync/opt/retroarch/retroarch -v &> "$runtime_log_path/retroarch.log"
    rm -rf "/tmp/ra_cache"
    cd /
    sync
    launch_BootMenu
  else
    #you done goofed.
    /media/bleemsync/bin/sdl_display "/media/bleemsync/etc/bleemsync/IMG/woah.png"
    sleep 1
    echo "[BLEEMSYNC](FAIL) tried to launch RetroArch and it's not installed! Opening Stock ui..."
    launch_StockUI
  fi
}

launch_BootMenu(){
  echo "[BLEEMSYNC](INFO) launching BootMenu"
  echo 2 > /data/power/disable
  $mountpoint/bleemsync/bin/boot_menu 
  [ -f "/tmp/launchfilecommand" ] && command=$(cat "/tmp/launchfilecommand") && rm -f "/tmp/launchfilecommand"
  if [ "$command" = "/media/lolhack/retroarch.sh" ]; then
    echo "[BLEEMSYNC](INFO) RA selected from boot menu. Launching RetroArch"
    launch_RetroArch
  else
    echo "[BLEEMSYNC](INFO) BS selected from boot menu"
    launch_StockUI
  fi
}

launch_StockUI(){
  echo "[BLEEMSYNC](INFO) launching stock ui"
  echo 0 > /data/power/disable
  cd "/data/AppData/sony/pcsx"
  export PCSX_ESC_KEY=2
  /usr/sony/bin/ui_menu --power-off-enable &> "$runtime_log_path/ui_menu.log"
}
###############################################################################


### MAIN BLEEMSYNC FUNCTION ###################################################
execute_bleemsync_func(){
  echo "[BLEEMSYNC](Executing) execute_bleemsync_func()"
  echo 1 > /sys/class/leds/red/brightness
  
  #Run on console bleemsync (This will be replaced in 1.0)
  if [ -f "$mountpoint/system/BleemSync/BleemSync" ]
  then
    cd "$mountpoint/system/BleemSync"
    chmod +x "BleemSync"
    ./BleemSync
    cd -
  fi

  # Build external directory structure
  mkdir -p "$mountpoint/system/bios"
  mkdir -p "$mountpoint/system/preferences/system"
  mkdir -p "$mountpoint/system/preferences/user"
  mkdir -p "$mountpoint/system/preferences/autodimmer"
  mkdir -p "$mountpoint/system/databases"
  mkdir -p "$mountpoint/system/region"
  mkdir -p "$mountpoint/system/ui"

  # Copy the bios files
  [ ! -f "$mountpoint/system/bios/romw.bin" ] && cp -fr "/gaadata/system/bios/"* "$mountpoint/system/bios"
  # Copy the regional.pre
  [ ! -f "$mountpoint/system/preferences/system/regional.pre" ] && cp -f "/gaadata/preferences/"* "$mountpoint/system/preferences/system"
  # Copy out the user.pre
  [ ! -f "$mountpoint/system/preferences/user/user.pre" ] && cp -f "/data/AppData/sony/ui/"* "$mountpoint/system/preferences/user"
  # Copy out the auto dimming config
  [ ! -f "$mountpoint/system/preferences/autodimmer/config.cnf" ] && cp -f "/data/AppData/sony/auto_dimmer/"* "$mountpoint/system/preferences/autodimmer"
  # Copy out the region info
  [ ! -f "$mountpoint/system/region/REGION" ] && cp -f "/gaadata/geninfo/"* "$mountpoint/system/region"
  # Copy ui error log
  [ ! -f "$mountpoint/system/ui/error.log" ] && cp -f "/data/sony/ui/"* "$mountpoint/system/ui"
  sync

  # Unmount partitons and create tmpfs - Shut system down on failure
  MOUNT_FAIL=0
  umount /data || MOUNT_FAIL=1 
  umount /gaadata || MOUNT_FAIL=1 
  # Create gaadata and data folders in tmp then mount over original folders
  mkdir -p "/tmp/gaadatatmp" "/tmp/datatmp"
  mount -o bind "/tmp/gaadatatmp" "/gaadata" || MOUNT_FAIL=1 
  mount -o bind "/tmp/datatmp" "/data" || MOUNT_FAIL=1 
  mount -o bind "$bleemsync_path/etc/bleemsync/SUP/scripts/20-joystick.rules" "/etc/udev/rules.d/20-joystick.rules" || MOUNT_FAIL=1 
  if [ "$MOUNT_FAIL" = "1" ]; then
    #display error message
    echo 0 > /sys/class/leds/green/brightness
    echo 1 > /sys/class/leds/red/brightness
    /media/bleemsync/bin/sdl_display "/media/bleemsync/etc/bleemsync/IMG/woah.png"
    sleep 1
    reboot
    exit 1
  fi

  # Create gaadata on tmpfs
  mkdir -p "/tmp/gaadatatmp/system/" "/tmp/gaadatatmp/databases/"
  cp -f "$mountpoint/system/databases/regional.db" "/tmp/gaadatatmp/databases/"
  ln -s "$mountpoint/system/region" "/tmp/gaadatatmp/geninfo"
  ln -s "$mountpoint/system/bios" "/tmp/gaadatatmp/system/bios"
  ln -s "$mountpoint/system/preferences/system" "/tmp/gaadatatmp/preferences"
  ls "$mountpoint/games" | grep '^[0-9]\+$' | xargs -I % sh -c "ln -s $mountpoint/games/%/GameData /tmp/gaadatatmp/% && mkdir -p $mountpoint/games/%/.pcsx && cp $mountpoint/games/%/GameData/pcsx.cfg $mountpoint/games/%/.pcsx"

  # Create data on tmpfs
  mkdir -p "/tmp/datatmp/sony/sgmo" "/tmp/datatmp/AppData/sony"
  ln -s "/tmp/diag" "/tmp/datatmp/sony/sgmo/diag"
  ln -s "/dev/shm/power" "/tmp/datatmp/power"
  ln -s "$mountpoint/system/ui" "/tmp/datatmp/sony/ui"
  ln -s "$mountpoint/system/preferences/user" "/tmp/datatmp/AppData/sony/ui"
  ln -s "$mountpoint/system/preferences/autodimmer" "/tmp/datatmp/AppData/sony/auto_dimmer"
  cp -fr "/usr/sony/share/recovery/AppData/sony/pcsx" "/tmp/datatmp/AppData/sony/pcsx"
  ls "$mountpoint/games" | grep '^[0-9]\+$' | xargs -I % sh -c "rm -rf /tmp/datatmp/AppData/sony/pcsx/% && ln -s $mountpoint/games/% /tmp/datatmp/AppData/sony/pcsx/%"
  ln -s "$mountpoint/system/bios" "/tmp/datatmp/AppData/sony/pcsx/bios"
  ln -s "/usr/sony/bin/plugins" "/tmp/datatmp/AppData/sony/pcsx/plugins"

  # Unite EMMC and MEDIA games and databases
  start=`date +%s%N`
  [ -d "/tmp/emmc_gaadata" ] && umount "/tmp/emmc_gaadata" && rm -fr "/tmp/emmc_gaadata"
  [ -d "/tmp/emmc_data" ] && umount "/tmp/emmc_data" && rm -fr "/tmp/emmc_data"
  mkdir -p "/tmp/emmc_gaadata" && mount -o ro "/dev/mapper/gaadata" "/tmp/emmc_gaadata/"
  mkdir -p "/tmp/emmc_data" && mount "/dev/mmcblk0p10" "/tmp/emmc_data/"

  emmc_gaadata_count=$(ls "/tmp/emmc_gaadata" | grep '^[0-9]\+$' | wc -l)
  media_gaadata_count=$(ls "/tmp/gaadatatmp" | grep '^[0-9]\+$' | wc -l)
  i=1

  $mountpoint/bleemsync/bin/sqlite3 "/tmp/emmc_gaadata/databases/regional.db" -cmd ".output /tmp/emmc.sql" ".dump" ".quit"
  [ -f "/tmp/join.sql" ] && rm -f "/tmp/join.sql" && touch "/tmp/join.sql"

  echo "BEGIN TRANSACTION;" >> "/tmp/join.sql"
  while true; do
    [ "$i" = "$(( $emmc_gaadata_count + 1))" ] && break
    ln -s "/tmp/emmc_gaadata/$i" "/tmp/gaadatatmp/$(( $media_gaadata_count + $i ))"
    if [ -d "/tmp/datatmp/AppData/sony/pcsx/$(( $media_gaadata_count + $i ))" ]; then
      ln -s "/tmp/emmc_data/AppData/sony/pcsx/$(( $media_gaadata_count + $i ))" "/tmp/datatmp/AppData/sony/pcsx/$(( $media_gaadata_count + $i ))"
    else
      mkdir -p "/tmp/datatmp/AppData/sony/pcsx/$(( $media_gaadata_count + $i ))"
      ln -s "/tmp/emmc_data/AppData/sony/pcsx/$(( $media_gaadata_count + $i ))" "/tmp/datatmp/AppData/sony/pcsx/$(( $media_gaadata_count + $i ))"
    fi
    echo $(grep "GAME VALUES($i," "/tmp/emmc.sql" | awk -v newindex=$(( $media_gaadata_count + $i )) -F "," '{ print "INSERT INTO GAME VALUES("newindex","$2","$3","$4","$5","$6","$7","$8","$9 }') >> "/tmp/join.sql"
    echo $(grep "DISC VALUES($i," "/tmp/emmc.sql" | awk -v newindex=$(( $media_gaadata_count + $i )) -F "," '{ print "INSERT INTO DISC VALUES(null,"newindex","$2","$3 }') >> "/tmp/join.sql"
    i=$(( $i + 1 ))
  done
  echo "COMMIT;" >> "/tmp/join.sql"

  sed -i -e 's/;,/;/g' "/tmp/join.sql" #Required cleanup because of potential dirty characters in SONY stock SQLite DB
  end=`date +%s%N`

  $mountpoint/bleemsync/bin/sqlite3 "/tmp/gaadatatmp/databases/regional.db" -cmd ".read /tmp/join.sql" ".quit"

  runtime=$(((end-start)/1000000))
  echo "[BLEEMSYNC](INFO) Uniting EMMC and MEDIA games and databases took: $runtime milliseconds"

  # Fix for last selected game issue. If not in place user may experience ui issue
  sed -i "s/iuiuserSettingLastSelectGameCursorPos.*/iuiuserSettingLastSelectGameCursorPos=0/" "/tmp/datatmp/AppData/sony/ui/user.pre"

  # Reload and apply udev rules that were overmounted above
  # Allows both controllers to be detected through a USB hub
  udevadm control --reload-rules
  udevadm trigger

  # Default pcsx.cfg
  cd "$mountpoint/games"
  for D in *; do
    if [ -d "$D" ]; then
      if [ ! -f "$D/GameData/pcsx.cfg" ]; then
        cp -f "../system/Defaults/pcsx.cfg" "$D/GameData/pcsx.cfg"
      fi
    fi
  done
  cd -

  #Patch out health check if toggled.
  if [ "$boot_disable_health" = "1" ]; then
    echo "[BLEEMSYNC](INFO) attempting to patch out H+S statement"
    PATCH_FAIL=0
    PATCH_DIR="/var/volatile/health_patch"
    PATCH_BIN="$PATCH_DIR/patch.bin"
    PATCH_TARGET="/usr/sony/bin/ui_menu"
    PATCH_WORKING="$PATCH_DIR/ui_menu"

    # Perform patching
    mkdir -p "$PATCH_DIR"
    cp -f "$PATCH_TARGET" "$PATCH_WORKING"
    echo -n -e '\xb8\x0c\x00\x06\x03\x58\xbe' > "$PATCH_BIN"
    dd bs=1 if="$PATCH_BIN" skip=0 of="$PATCH_WORKING" seek=28084 count=3 conv=notrunc
    dd bs=1 if="$PATCH_BIN" skip=3 of="$PATCH_WORKING" seek=28120 count=2 conv=notrunc
    dd bs=1 if="$PATCH_BIN" skip=5 of="$PATCH_WORKING" seek=28712 count=2 conv=notrunc
    rm -f "$PATCH_BIN"
    mount -o bind "$PATCH_WORKING" "$PATCH_TARGET" || PATCH_FAIL=1
    if [ "$PATCH_FAIL" = "0" ]; then
      echo "[BLEEMSYNC](INFO) patched out H+S statement"
    else
      echo "[BLEEMSYNC](FAIL) failed to patch out H+S statement, continuing anyway..."
    fi
  fi

    [ -d "/tmp/diag" ] && rm -rf "/tmp/diag"
  
  echo 0 > /sys/class/leds/red/brightness
  echo "[BLEEMSYNC](INFO) completed bleemsync boot"
  
  killall -s KILL sdl_display

  booted=0

  [ "$boot_target_stock_ui" = "1" ] && [ "$booted" = "0" ] && booted=1 && launch_StockUI
  [ "$boot_target_stock_BM" = "1" ] && [ "$booted" = "0" ] && booted=1 && launch_BootMenu
  [ "$boot_target_stock_RA" = "1" ] && [ "$booted" = "0" ] && booted=1 && launch_RetroArch
  
  #Cleanup and shutdown (If active telnet session don't shutdown console.)
  if [ "$(who | wc -l)" = "1" ]; then
    while true; do
      sleep 999
    done    
  else
    [ -d "/tmp/ra_cache" ] && rm -rf "/tmp/ra_cache"
    sync
    sync
    echo "[BLEEMSYNC](Executed) execute_bleemsync_func()"
    reboot
  fi
  exit 0
}
###############################################################################